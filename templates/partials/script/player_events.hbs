
{{!< default}}
{{!-- 
/**
 * @Stake v3
 * Developed by Engagement Lab, 2016-2017
 * ==============
 * 
 * Script includes partial for PLAYERS socket.io events
 * ==========
 */
--}}

var clockInterval,
    timeoutClock,
    countdownAnim,
    countdownPaused,
    playerWasReconnected,
    startAnim = new TimelineLite({paused: true}).fromTo($('#btn-start-game'), 1, {scale:0, autoAlpha:0}, {scale:1, autoAlpha:1, visibility:'visible', ease:Elastic.easeOut});

// If true, screen doesn't advance right away via 'game:next',
// it is saved in nextScreenData and advanced to later
var waitForNextScreen = false,
    nextScreenData;

var resetSession = function() {

    // Remove saved game code, uid, markup, and set to not reconnected
    sessionStorage.removeItem('gameCode');
    sessionStorage.removeItem('uUID');
    sessionStorage.removeItem('markup');
    sessionStorage.removeItem('lastDuration'); 
    sessionStorage.setItem('reconnected', false);

}

var startTimer = function(secondsLeft, timerAdvance) {
    
    var wasPaused = false;

    if($('.screen .timer').length === 0)
        return;

    if(secondsLeft > 0)
       timerActive = true;
            
    clockInterval = setInterval(function() {

        function clockTick() {
            $('#countdown').text(secondsLeft + ' seconds');
            secondsLeft--;
        }

        // Resume timer UI if timer paused due to player disconnect or 
        if((!countdownPaused && wasPaused))
            countdownAnim.animate(1, {duration: secondsLeft*1000});

        wasPaused = countdownPaused;

        // If timer paused, stop UI animation and bail
        if(countdownPaused) { 
            countdownAnim.stop(); 
            return;
        }

        clockTick();

        if(secondsLeft === 0) {
            clearInterval(clockInterval);
            timerActive = false;
        }

    }, 1000);
    
    countdownAnim = new ProgressBar.Circle(
      '.screen .timer', 
      {
          color: '#fff',
          duration: secondsLeft*1000,
          easing: 'easeInOut',
          strokeWidth: 6,
          trailColor: 'rbga(235, 235, 235, 0.5)',
          trailWidth: 0.8,
          fill: '#ff3d6b',
          // Set default step function for all animate calls
          step: function(state, circle) {
            circle.setText(secondsLeft);
          }
      }
    );

    // If timer is being force-advanced, set progress
    if(timerAdvance && sessionStorage.getItem('lastDuration')) {
        var original = parseInt(sessionStorage.getItem('lastDuration'));
        var progressRatio = (secondsLeft / original);
    
        countdownAnim.set(progressRatio);
        countdownAnim.animate(1, {duration: original*1000});
    }
    else
        countdownAnim.animate(1);

}

var setupScreen = function() {

    // Add trigger to go to next step on next-step buttons
    $('.next-step').click(function(evt) {
        nextPhaseScreen();
    });

    // Reset screen index
    currentScreenIndex = 0;

    $(isDecider ? '.player' : '.decider').remove();

    $('#gameContent').addClass('in-game');
    $('#stages-bar').show();

    sessionStorage.setItem('markup', $('#gameContent').html());

    // Animate initial
    screenOpen($('.screen:first'));

    currentPhaseIndex = sessionStorage.getItem('phase');
    currentScreenIndex = sessionStorage.getItem('screen');

    phaseBarProgress();

    runMods();

}

var playerDisconnected = function(timeoutTime, names) {

    openInnerModal();

    if(!names || names.length === 0)
        return;
    
    var timeLeft = timeoutTime,
        modal = $('#error-player-disconnected'),
        singular = modal.find('h2 #singular'),
        plural = modal.find('h2 #plural');

    modal.find('h2 #player').text(names.join(', '));
    modal.find('h2 #time').text(timeLeft + 's');

    if(names.length > 1) {
        plural.show();
        singular.hide();
    }
    else {
        plural.hide();
        singular.show();
    }

    if(!modal.is(':visible'))
        modal.trigger('show');

    timeoutClock = setInterval(function() {

        timeLeft--;
        modal.find('h2 #time').text(timeLeft + 's');

        if(timeLeft === 0)
            clearInterval(timeoutClock);

    }, 1000);

}

socketEvents = function(eventId, eventData) {

    switch (eventId) {

        case 'connect':
            
            if(sessionStorage.getItem('gameCode')) {
                // Check if player is active in game
                socket.emit('login:active', {
                  gameId: sessionStorage.getItem('gameCode'), 
                  username: sessionStorage.getItem('username'),
                  uid: sessionStorage.getItem('uUID'),
                  decider: isDecider
                });
            }

            if(isDecider) {
                // Session started, let's sign-up the decider for this room
                socket.emit('room', emitData({type: 'decider', username: $('#player-name').val(), uid: playerUID}));
            }
            else {
                // Connected, let's sign-up for to receive messages for this room
                socket.emit('room', emitData('player'));
            }

            {{!-- $('#gameContent').addClass('player-grid'); --}}

            $('.login.form').fadeOut(function() { $('.login.waiting').fadeIn(function(){
                {{!-- $('.lobby#join').addClass('player-grid'); --}}
            }); });
            
            break;

        case 'disconnect':

            if(gameEnded)
                return;

            // Remove saved sesh
            resetSession();

            if ($('.modal'))
                $('.modal').fadeOut();

            $('#error-disconnected').trigger('show');
            $('#error-disconnected #text').css('top', '0');

            break;

        case 'player:loggedin':

            {{!-- $('#gameContent').html(eventData.html); --}}
            
            playerWasReconnected = false;

            if (isDecider)
                $('#btn-role-card').css('visibility', 'hidden');

            $('#debug-info').text('Player id: ' + eventData.id);

            playerId = eventData.id;

            var gameCodeMarkup = '';
            
            _.each(eventData.code.split(''), function(char, i) {
                gameCodeMarkup += '<span>' + char + '</span>';
            }); 

            $('#game_code .access-code').html(gameCodeMarkup);

            break;

        case 'player:reconnected': 

            if(playerWasReconnected)
                return;

            // Set local player state as reconnected
            playerWasReconnected = true;

            isDecider = eventData.is_decider;

            var markup = sessionStorage.getItem('markup');

            $('#bottom-bar').show();
            $('#gameContent').html(markup).promise().done(function() {
                
                setupScreen();

                var secondsLeft = eventData.resume_duration; 
                if(secondsLeft && secondsLeft > 0)
                    startTimer(secondsLeft, true);
                else {
                    // Check if timer element is left-over; if so, timer is now at 0 and should show next btn
                    startTimer(0);
                    if(isDecider)
                        $('#btn-next').show();
                }

                $('#name, .login.input').fadeOut(function() {

                    $('#begin').addClass('wait');
                    $('#join, .login.waiting').fadeIn();

                });

                playerDisconnected(eventData.timeout_remaining, eventData.disconnected_players);

            });

            break;

        case 'player:lost':

            // A current player lost from session
            var timeLeft = eventData.timeout;

            if(timeoutClock)
                clearInterval(timeoutClock);

            playerDisconnected(timeLeft, eventData.names);

            countdownPaused = true;

            break;

        case 'players:update':

            var staticPlayers = $('.player-static');
            var currentPlayers = _.map(eventData.players, function(player){
                return {name: player.username, icon: player.index};
            });

            var playersNeeded = {{#ifeq debug true}}2{{else}}3{{/ifeq}}

            // Are all players connected?
            if(eventData.all_connected) {
                $('#error-player-disconnected').trigger('hide');

                if(timeoutClock)
                    clearInterval(timeoutClock);

                countdownPaused = false;
            }

            // A player has re-joined
            if(eventData.state === 'player_rejoined')
                playerDisconnected(eventData.timeout_remaining, eventData.disconnected_players);

            // Allow to start?
            if(currentPlayers.length === playersNeeded)
                startAnim.play();
            else if(currentPlayers.length < playersNeeded)
                startAnim.reverse();

            $('.player-grid .list').empty();

            _.each(currentPlayers, function(player, index) {

                var nameFormatted = (player.name.length <= 15) ? player.name : player.name.substring(0, 15) + "...";
                var index = player.icon;

                $('.player-grid .list').append('<div id="player-' + index + '" class="col-sm-12 player-logo col-centered"><p>' + nameFormatted + '</p></div>');

            });

            break;

        case 'player:assignrole':

            $('#role-card').html(eventData);
            
            $('#btn-close-role-card').on('click', function(evt) {
                roleCardOpenClose(false);
            });
            $('#btn-role-card').on('click', function(evt) {
                roleCardOpenClose(true);
            });
            $('#role-card').on('swipe', function() {
                $('#role-card').removeClass('open').addClass('closed');
            });

            break;

        case 'game:start':
        
            if (!$('.rules-screen').css('display', 'block'))
                $('#background-logo').show();

            $('#bottom-bar').show();
            
            $('#agenda-items .role:visible').remove();
            $('#agenda-items .role').first().show();

            break;

        case 'game:next_item':

            var modalToOpen = eventData.chosen ? 'yes' : 'no';
            var modalToRemove = !eventData.chosen ? 'yes' : 'no';

            $('.agenda_item.' + modalToRemove).first().remove();
            openInnerModal('.' + modalToOpen);
 
            break;

        case 'game:advance':

            currentPhaseIndex = -1;

            break;

        case 'game:skip_rules':

            $.when($('.screen.rules-screen').remove()).then(
                function() {
                    
                    // Local session update
                    sessionStorage.setItem('markup', $('#gameContent').html());   
                    {{!-- sessionStorage.setItem('screen', currentScreenIndex); --}}

                    $('.skip-rules').trigger('show');

                    runMods();

            });

            break;

        case 'game:next_screen':

            // Only occurs for non-decider, since decider sends this
            // Or if forced, do this for all players
            if(!isDecider || eventData.force)
                nextPhaseScreen();

            break;

        case 'game:next_phase':

            if (!$('.rules-screen').css('display', 'block'))
                $('#background-logo').show();

            $('#bottom-bar').show();

            $('#stages-bar').show();
            sessionStorage.setItem('gameCode', gameCode);

            // Don't show yet?
            if(waitForNextScreen) {
                nextScreenData = eventData;
                return;
            }

            if (eventData.html) {
                updateGameContent(eventData.html, function() {

                    nextPhase();
                    setupScreen();

                });

            } else {
                updateGameContent(eventData, function() {

                    nextPhase();
                    setupScreen();

                });
            }
            
            
            break;

        case 'game:refresh_screen':
            
            // Don't show yet?
            if(waitForNextScreen) {
                nextScreenData = eventData;
                return;
            }
            
            updateGameContent(eventData, function() {

                setupScreen();

                // Move immediately to restart point in current phase, by removing screens before it and showing it
                $('.screen.restart').prevAll().remove();

                // Hide any previously hidden elements
                $('.screen.restart .hidden-el').css({visibility:'hidden'});
                $('.screen.restart').show();

                openInnerModal();

            });

            break;

        case 'game:ending':

            $('#error-box').text(eventData);
            $('#error-box').show(function(){
                $('.form .error').delay(3000).fadeOut('slow');
            });

            break;

        case 'game:ended':

            // Reset game session data and send back to logn
            resetSession();
            window.location = window.location;

            $('#gameContent').html(eventData);

            break;

        case 'game:resumed':

            $('#error-box').hide();

            break;

        case 'game:notfound':

            if(isDecider) return;

            // If game not found, show name entry and clear session
            loginFromTo('start', 'name');
            resetSession();

            $('.form.login').show();

            break;
            
        case 'game:countdown':

            $('#btn-time').fadeOut();

            countdownPaused = false;

            if(clockInterval)
                clearInterval(clockInterval);

            if(countdownAnim)
                countdownAnim.destroy();
                   
            var secondsLeft = eventData.duration; 
            startTimer(secondsLeft);
            sessionStorage.setItem('lastDuration', secondsLeft);

            break;

        case 'game:countdown_ending':

            $('.form .error').fadeIn().html(eventData);
            $('.form .error').delay(3000).fadeOut('slow');

            break;

        case 'game:countdown_end':

            $('#added-time').hide();
            timerActive = false;

            // Move right to next player if in double-down
            if(eventData === 'doubledownCountdown') {

                if(isDecider) {
                    socket.emit('game:next_player', emitData());
                    return;
                }

            }
            
            runMods();
            openInnerModal();
    
            $('#btn-more-time, #btn-cancel').click(function() {
                var modal = $('#more-time-wrapper.showing');
              
                modal.fadeOut(function() {
                    $('#overlay').empty();
                    $('#overlay').hide();
                });
                
            });

            if(eventData == "brainstormCountdown" || eventData == "deliberateCountdown") 
                nextPhaseScreen();

            break;

        case 'game:countdown_player':
            
            // Close "(playername) is deciding...." modal
            var modal = $('#more-time-wrapper');
          
            modal.fadeOut(function() {
                $('#overlay').empty();
                $('#overlay').hide();
            });

            break;

        case 'game:player_done':
            
            // Close "(playername) is deciding...." modal
            var modal = $('#more-time-wrapper');
          
            modal.fadeOut(500, function() {
                $('#overlay').empty().hide();
                $('#btn-next-player').fadeIn();
            });

            if(eventData.phase === 'doubledown' && isDecider) {
                setTimeout(function() {
                    socket.emit((eventData.end ? 'game:next_screen' : 'game:next_player'), emitData(true));
                }, 600);
            } else if (eventData.phase === 'pitch' && isDecider) {
                setTimeout(function() {
                    socket.emit((eventData.end ? 'game:next' : 'game:next_player'), emitData(true));
                }, 600);
            }

            break;

        case 'game:phase_over':
            
            $('#btn-next-stage').fadeIn();

            break;

        case 'game:decider':

            isDecider = eventData;

            $('#bottom-bar').show();

            $('#btn-role-card').css('visibility', isDecider ? 'hidden' : 'visible');

            break;

        case 'game:end':

            $('#gameContent').html(eventData);

            var nextRoundAnim = new TimelineLite({ paused:true });
            nextRoundAnim.from($('#nextRound'), 2.5, { scale: 0, opacity:0, ease:Elastic.easeOut }, { scale: 1, opacity: 1, display: 'block'});
            nextRoundAnim.play();
            break;

        case 'game:last':

            break;

        case 'coins:add':
        case 'coins:remove':

            $('#' + eventData.type + '-coins span').text(eventData.amt);

            break;

        default:

            console.warn('No handler found for event "' + eventId + '" in socketEvents.');

            break;

    }

};