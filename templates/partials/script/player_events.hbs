{{!< default}}
{{!-- 
/**
 * @Stake v3
 * Developed by Engagement Lab, 2016
 * ==============
 * 
 * Script includes partial for PLAYERS socket.io events
 * ==========
 */
--}}

var clockInterval;
var playerWasReconnected;
var startAnim = new TimelineLite({paused: true}).fromTo($('#btn-start-game'), 1, {scale:0, autoAlpha:0}, {scale:1, autoAlpha:1, visibility:'visible', ease:Elastic.easeOut});

// If true, screen doesn't advance right away via 'game:next',
// it is saved in nextScreenData and advanced to later
var waitForNextScreen = false;
var nextScreenData;

var getScript = function (gameType) {
    $.getScript( '/js/events/' + gameType + '.js' )
        .done(function( script, textStatus ) {
            console.log( textStatus );
          })
          .fail(function( jqxhr, settings, exception ) {
            console.error('Unable to load %s (error: "%s")', gameType + '.js', exception);
        });
}

socketEvents = function(eventId, eventData) {

    switch (eventId) {

        case 'connect':

            console.log('--- Connected to server ---');

            if(isDecider) {
                // Session started, let's sign-up the decider for this room
                socket.emit('room', emitData({type: 'decider', username: $('#player-name').val(), uid: playerUID}));

                
            }
            else {
                // Connected, let's sign-up for to receive messages for this room
                socket.emit('room', emitData('player'));
            }

            $('#gameContent').addClass('player-grid');

            $('.login.form').fadeOut(function() { $('.login.waiting').fadeIn(); });
            
            break;

        case 'player:loggedin':

            {{!-- $('#gameContent').html(eventData.html); --}}

            sessionStorage.setItem("gameType", eventData.gameType);
            
            playerWasReconnected = false;

            $('#debug-info').text('Player id: ' + eventData.id);
            
            console.log (eventData.id + " is the player ID");

            playerId = eventData.id;

            break;

        case 'player:reconnected': 

            // Set local player state as reconnected
            playerWasReconnected = true;
            

            break;

        case 'players:update':

            var staticPlayers = $('.player-static');
            var currentPlayers = _.pluck(eventData.players, 'username');
            var playersNeeded = {{#ifeq debug true}}2{{else}}3{{/ifeq}}

            // Allow to start?
            if(currentPlayers.length === playersNeeded)
                startAnim.play();
            else if(currentPlayers.length < playersNeeded)
                startAnim.reverse();

            $('#players').empty();

            _.each(currentPlayers, function(name, index) {

                var nameFormatted = (name.length <= 15) ? name : name.substring(0, 15) + "...";

                $('#players').append('<div class="col-sm-3">' + nameFormatted + '</div>');

            });

            break;

        case 'player:agenda_item':

            // Don't let next screen take over yet
            waitForNextScreen = true;

            var container = eventData.chosen ? $('#chosen') : $('#not-chosen');
            
            // Edit coin count
            container.text(container.text().replace('{coins}', eventData.coins));

            var chosenAnim = new TimelineLite({onComplete: function() {

                setTimeout(function() { updateGameContent(nextScreenData, function() {

                    waitForNextScreen = false;
                    nextScreenData = undefined;

                }) }, 1400);

            }});

            chosenAnim.from(container, .6, {scale:0, autoAlpha: 0, ease:Elastic.easeOut});

            break;

        case 'game:start':
        case 'game:next':

            // Don't show yet?
            if(waitForNextScreen) {
                nextScreenData = eventData;
                return;
            }

            updateGameContent(eventData, function() {

                rulesAnim();

                if(isDecider)
                    $('#decider-controls, #decider').show();

                $('#gameContent').addClass('in-game');

                if ($('#gameContent').hasClass('login')) {
                    $('#gameContent').removeClass('login');
                } else if ($('#gameContent').hasClass('player-grid')) {
                    $('#gameContent').removeClass('player-grid');
                }

            });
            
            break;

        case 'game:ending':

            $('#error-box').text(eventData);
            $('#error-box').show();

            break;

        case 'game:ended':

            // Remove saved game code since game is over
            sessionStorage.removeItem('gameCode');

            $('#gameContent').html(eventData);

            break;

        case 'game:resumed':

            $('#error-box').hide();

            break;

        case 'game:notfound':

            if(isDecider) return;

            $('#error-box').text('game not found!');
            $('#error-box').show();

            break;
            
        case 'game:countdown':

            $('#btn-time').fadeOut();

            if(clockInterval)
                clearInterval(clockInterval);

                var secondsLeft = eventData.duration;
                var timeFactor = 360 / secondsLeft;
                var clockHand = $('#clock-hand');
                    
                clockInterval = setInterval(function() {

                    function clockTick() {
                        {{!-- clockHand.css({
                            transform:'rotateZ('+ -(timeFactor*secondsLeft) + 'deg)'
                        }); --}}
                        $('#countdown').text(secondsLeft + ' seconds');
                        secondsLeft--;
                    }

                    clockTick();

                    if(secondsLeft === 0)
                        clearInterval(clockInterval);
                }, 1000);

            break;

        case 'game:countdown_ending':

            $('.form .error').fadeIn().html(eventData);

            break;


        case 'game:countdown_ending':

            $('.form .error').fadeIn().html(eventData);

            break;

        case 'game:countdown_end':

            $('#added-time').hide();

            runMods();
            
            $('#more-time,#btn-next').fadeIn();
            $('#btn-more-time,#btn-cancel').click(function() { $('#more-time').fadeOut()} );

            break;

        case 'game:countdown_player':
            
            $('#added-time').text(eventData + " is speaking, since they added more time.").fadeIn();

            break;

        case 'game:player_done':
            
            $('#btn-next-player').fadeIn();

            break;

        case 'game:phase_over':
            
            $('#btn-next-stage').fadeIn();

            break;

        case 'game:next_item':

            $('#agenda-items .role:visible').remove();
            $('#agenda-items .role').first().show();

            break;

        case 'game:decider':

            isDecider = eventData;

            // Hide decider controls if no longer decdier
            if(!isDecider)
                $('#decider-controls').hide();

            break;

        case 'game:end':
        case 'players:update':

            $('#gameContent').html(eventData);

            var nextRoundAnim = new TimelineLite({ paused:true });
            nextRoundAnim.from($('#nextRound'), 2.5, { scale: 0, opacity:0, ease:Elastic.easeOut }, { scale: 1, opacity: 1, display: 'block'});
            nextRoundAnim.play();
            break;

        case 'coins:add':
        case 'coins:remove':

            $('#' + eventData.type + '-coins span').text(eventData.amt);

            break;

        default:

            console.warn('No handler found for event "' + eventId + '" in socketEvents.');

            break;

    }

};