{{!< default}}
{{!-- 
/**
 * @Stake v3.0
 * Developed by Engagement Lab, 2016-2017
 * ==============
 * 
 * Script include for global logic
 * ==========
 */
--}}

<script type="text/javascript">

	var socket,
	socketEvents,
  gameCode,
  deck,
  gameEnded = false,
  timerActive = false,
	gameContainer,

  playerId,
  playerUID,
  isDecider,
	timeline = new TimelineLite(),
	mobileDetect = new MobileDetect(window.navigator.userAgent),

	isApple = mobileDetect.is('iOS'),
	isAndroid = mobileDetect.is('Android') || mobileDetect.match('Android'),
	isMobile = (isAndroid || isApple),

	// Can be set by any event logic waiting for content update
	updateContentCallback,

	// Absolute positioning global
	maxWidth = 425,

	// For countdown debugging
  countdownPaused = false,

  // Tracks current phase index and the screen during each phase
  currentPhaseIndex = -1,
  currentScreenIndex = 0,

  sfxPath = 'https://res.cloudinary.com/engagement-lab-home/video/upload/v1/at-stake/sfx/',
  {{#ifeq env "development"}}
  	sfxPath = '/sfx/'
  {{/ifeq}}

  // All possible socket event IDs
	eventIds = [

		{{#ifnoteq environment "production"}}
		'debug:pause',
		'debug:end',
		{{/ifnoteq}}

		'connect',
		'disconnect',
		'game:last',

		'player:loggedin',
		'player:inactive',
		'player:reconnected',
		'player:lost',
		'players:update',
		'player:finished',
		'player:agenda_item',
		'player:assignrole',

		'game:error',
		'game:tutorial',
		'game:start',
		'game:next',
		'game:next_phase',
		'game:next_screen',
		'game:next_round',
		'game:next_item',
		'game:skip_rules',
		'game:ending',
		'game:ended',
		'game:end',
		'game:resumed',
		'game:notfound',
		'game:countdown',
		'game:countdown_ending',
		'game:countdown_end',
		'game:countdown_player',
		'game:phase_over',
		'game:round_over',
		'game:player_done',
		'game:survey',
		'game:advance',
		'game:decider',
		'game:refresh_screen',

		'coins:add',
		'coins:remove',
	
	];

	// setInterval(function() {console.log($('#wrapper').offset().left)}, 100)

	/* 
		Manually position absolutely-positioned elements on window re-size
	*/
	var absoluteLayout = function() {

		// Setup config for layout
		var absolutes = [],
				windowsize = $(window).width(),
				bodysize = $('#wrapper').width(),
				wrapperLeft = $('#wrapper').offset().left,
				extraWindow = (windowsize - bodysize)/2;

		// Locally-scoped methods
		var findAbsolutes = function() {

					// Get all absolutely-positioned elements
					var outerAbsolutes = 
					$('#wrapper :not(#gameContent *, #homeContent *, #stages-bar *, .modal)')
					.filter(function(){
					  return ($(this).css('position') == 'absolute');
					});

					setAbsolutes(outerAbsolutes);

				},
				setAbsolutes = function(absolutes) {
			
					_.each(absolutes, function(item) {

						var position = {};

						// Check current positions
						if ($(item).css('left'))
							position.left = $(item).css('left');

						if ($(item).css('right'))
							position.right = $(item).css('right');

						// If left, set it
						if (position.left)
							$(item).css('left', wrapperLeft);

						// If right, set it
						if (position.right){
							position.right =+ extraWindow;
							$(item).css('right', position.right);
						}

						// Call finish function after xxx milaseconds
						var finish = _.debounce(finishResize, 500);
						finish();

					});

				};

		findAbsolutes();

	};

	var finishResize = function() {

		// Show wrapper now that resize is complete
		$('#wrapper').css('visibility', 'visible');

	}

	/* 
	 Associate provided data object with current game ID
	*/
	var emitData = function(data) {

		if(gameCode === undefined && typeof(data.code) !== 'undefined')
			gameCode = data.code;

		return { gameId: gameCode, msgData: data };
	
	};

	/* 
	 Obtains the embedded data ('data-key="something"') object from the provided submit button
	*/
	var getFormData = function(submitElement) {

		var pkg;

		if(submitElement[0].dataset === undefined)
			return undefined;
		
		try {
			pkg = JSON.parse(submitElement[0].dataset.package);
		}
		catch(e) {
			pkg = submitElement[0].dataset.package;
		}

		if($.isPlainObject(pkg)) {
			$.each(Object.keys(pkg), function( key, value ) {

				if(pkg[value] !== undefined) {
					if(pkg[value].toString().indexOf('#') === 0)
					  pkg[value] = $(pkg[value].toString()).val();
				}

			});
		}
		else if(!submitElement.is('button'))
			pkg = $(pkg).val();

		return pkg;

	};

	/* 
		Util to convert seconds to h:mm:ss
	*/
	var secondsToHms = function(d) {

	  d = Number(d);
	  var h = Math.floor(d / 3600);
	  var m = Math.floor(d % 3600 / 60);
	  var s = Math.floor(d % 3600 % 60);

	  var hourDisplay = '<span id="h">' + (h > 0 ? h + ":" + (m < 10 ? "0" : "") : "") + '</span>';
	  var minsDisplay = '<span id="m">' + m + '</span>';
	  var secondsDisplay = '<span id="s">' + (s < 10 ? "0" : "") + s + '</span>';

	  return (hourDisplay + minsDisplay + ":" + secondsDisplay); 

	};

  /**
  * Util to inject markup into game content container and run any callbacks
  *
  * @param {String} content HTML to use
  * @param {Function} callback Function to call after HTML updated
  * @param {Boolean} pauseAnimate Don't animate screen back in; instead pass animate function to callback to use later
  * @class global
  * @name updateGameContent
  */
	var updateGameContent = function(content, callback, pauseAnimate) {

		// Inject markup content and fire callback when done
		gameContainer.html(content)
								 .promise()
								 .done(function() {
			
										if(!pauseAnimate) {
										
										 		if(callback)
											 		callback();

											 	if(updateContentCallback)
												 	updateContentCallback();

										
										}
										else {

											 	if(updateContentCallback)
												 	updateContentCallback();

										}

								    // Hide loading
								    $('#loading-modal').fadeOut(250);

								 });

		if($('#top-header').length > 0) {
			var topBar = $('#top-header').detach();
			topBar.after('#nav-close-wrapper');
		}
	}

	var nextPhase = function() {

	    currentPhaseIndex++;Â 

	    phaseBarProgress();
	    
	    $('#overlay').hide();

	    // Local session update
	    // sessionStorage.setItem('markup', $('#gameContent').html());    
	    sessionStorage.setItem('phase', currentPhaseIndex);    

	}

	var nextPhaseScreen = function() {
	    
	    currentScreenIndex++;
      
      $('#overlay').empty().hide();

	    //TODO: Animate
	    $.when($($('.screen')[0]).remove()).then(function() {

	        var newScreen = $('.screen')[0];
	        // $(newScreen).show();
	        
	        // Local session update
	        sessionStorage.setItem('markup', $('#gameContent').html());   
	        sessionStorage.setItem('screen', currentScreenIndex);

	        $(newScreen).trigger('show');

	        runMods();

	        var timerPreview = $($('.screen')[0]).find('.timer.preview');
	        var hasTimer = timerPreview.length === 1;
	        if(hasTimer) {
	            new ProgressBar.Circle(
	              '.screen .timer.preview', 
	              {
	                    color: '#fff',
	                    strokeWidth: 6,
	                    trailColor: 'rbga(235, 235, 235, 0.5)',
	                    trailWidth: 0.8,
	                    fill: '#ff3d6b',
	                    text: {
	                      value: $(timerPreview[0]).data('duration')
	                    }
	              }
	            );
	        }

	    });

	}

	var openInnerModal = function(selector) {

			if(!selector)
				selector = '';

			var modalSelector = $('.screen:visible .inner-modal' + selector).first();

			if(modalSelector.length === 0)
				return;

	    // $('#gameContent').addClass('blur');
	    $('#overlay').empty();

	    if(!_.isEmpty(modalSelector.data())) {

		    // If modal set to 'clone' mode, keep copy in current parent
	    	if(modalSelector.data('clone') === true)
			    modalSelector.clone().appendTo(modalSelector.parent());

			  // If modal has 'wait' mode enabled, open only if current countdown is over
		    if(modalSelector.data('wait') === true) {
		    	if(timerActive) return;
		    }

		  }

	    $('#overlay').append(modalSelector.first());
	    $('#overlay, #overlay .inner-modal').show();

	    // Enable/disable ability to buy coins
      var cost = parseInt($('#overlay .inner-modal .coins').text());
      var coins = parseInt($('#player-coins span').text());
      var disableBuy = (coins - cost) < 0;
      $('#overlay ' + (disableBuy ? '#btn-more-time' : '#btn-empty')).remove();    

	    var modalDuration = $('#overlay .inner-modal').data('duration');

	    if(modalDuration) {
	        var modalTimeout = setTimeout(function() {
	            var gotoNext = $('#overlay .inner-modal').data('next');

	            clearTimeout(modalTimeout);

	            $('#overlay').empty();
	            $('#overlay').hide();

	            if(gotoNext === 'next_screen')
		            nextPhaseScreen();

	            else if(gotoNext === 'next_modal')
		            openInnerModal();

	        }, modalDuration*1000);
	    }
	    
	    $('#overlay .inner-modal .post-button').click(function(evt) {

	        // $('#gameContent').removeClass('blur');
	        $('#overlay').empty();
	        $('#overlay').hide();

	    });

	}

	var runMods = function() {

		var modifier = $('.screen:first span#modifier');

		// Engage any template script modifiers
		if(modifier.length > 0) {

			if(modifier.data().hide_next) 
		 		$('#btn-next').fadeOut();
		 	else if(!isDecider)
		 		$('#btn-next').fadeIn();
			
			if(modifier.data().highlight) 
				$(modifier.data().highlight).addClass('highlight');

			// Move modal inside partial to top-level overlay and assign button events
			if(modifier.data().inner_modal)
	      openInnerModal();

		}
		/*else {

				// Defaults
		 		$('#btn-next').fadeIn();

		}*/

	}

	/*
	    Hide/show loading modal
	*/
	var loadToggle = function(show, fast) {
	 
	    if(fast) {
	        // Hide/show loading w/o anim
	        $('#loading-modal').toggle(show);
	    }
	    else {
	        // Hide/show loading
	        $('#loading-modal').fadeTo(250, (show ? 1 : 0), 'easeInOutQuart');
	    }

	}

	var registerEvents = function() {

    {{#ifeq environment "development"}}
        
        socket.on('connect_timeout', function() {
           console.warn('Client timed out when connecting.');
           {{!-- debugger; --}}
        });
        socket.on('disconnect', function() {
           console.warn('Client was disconnected!');
           {{!-- debugger; --}}
        });
        socket.on('reconnecting', function() {
           console.log('Reconnecting.');
           {{!-- debugger; --}}
        });
        socket.on('reconnect_attempt', function() {
           console.log('Trying to reconnect!');
           {{!-- debugger; --}}
        });
        socket.on('reconnect_error', function(err) {
           console.error('Reconnect error: %s', err);
           {{!-- debugger; --}}
        });

        console.log('Connecting to game "' + gameCode + '".');

    {{/ifeq}}

    $.each(eventIds, function(index, id) {
      
      socket.on(id, function(eventData) {

            {{#ifnoteq environment "production"}}

                $('#last-event').text('last event: ' + id);

                console.log("EVENT ID: ", id);

            {{/ifnoteq}}
            
            socketEvents(id, eventData);

            if(typeof(gameEvents) == "function")
                gameEvents(id, eventData);

        });

    });

	}

	var setupDecider = function() {

    isDecider = true;

    // Accesscode may be provided by server when debugging
    var gameCodeHtml = '';
    if(!gameCode) {
	    gameCode = '{{accessCode}}';

      _.each(gameCode.split(''), function(char, i) {
          gameCodeHtml += '<span>' + char + '</span>';
      });

	    // Ensure login is gone and all decide UI shows
	    $('#name,#join,#choices').remove();
	    $('#share_code .access-code').html(gameCodeHtml);
	    $('#decider .create').hide();
      $('#decider').show();
      $('#decider .waiting, #decider-debugging').show();
      $('#lobby').addClass('wait');

	    $('#player-name').val('Player_' + Math.floor(Math.random() * (10 - 1 + 1)) + 1);

		}

    // Create uid for player
    if(!sessionStorage.getItem('uUID')) {
        playerUID = Math.floor(Math.pow(10, 10-1) + Math.random() * (Math.pow(10, 10) - Math.pow(10, 10-1) - 1));
        sessionStorage.setItem('uUID', playerUID);
    }
    else 
        playerUID = sessionStorage.getItem('uUID');
    
    // Open socket connection
    socket = io('//{{host}}', {path: '/at-stake-socket', 'reconnection': true,'reconnectionDelay': 500,'maxReconnectionAttempts':Infinity});
    registerEvents();

	}

	{{#if mobile}}
		{{!-- LOAD MOBILE METHODS IF MOBILE DEVICE --}}
		{{> script/mobile}}
	{{/if}}

	$(window).on('resize', function () {
		
		if(isMobile)
			return;

		// Hide content wrapper during resize
		$('#wrapper').css('visibility' ,'hidden');

		// Adjust absolutely-position elements for desktop only
		absoluteLayout();

		// TODO: Work out overlay during resize?
		// $('#overlay').html('<div style="margin-top: 10%" class="col-sm-12 col-centered">looks like you\'re doing some resizing...</div>').show();

	});

	window.onload = function() {

	  // Detect if browser is in private/ingonito mode and if so, prevent any execution and show warning message
		detectPrivateMode(function(isPrivate) {

			// Initialize layout
			absoluteLayout();

			$("#nav-dropdown").on('click', function() {
				$('.nav-dropdown').show();
				$('#nav-close').show();

				openAnim.play(0);

			});
			$('#nav-close').on('click', function() {

				closeAnim.play();

			});
				
			// GA include
			(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
		  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
		  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
		  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

			{{#ifeq environment "production"}}

				ga('create', 'UA-64617433-7', 'auto');
			  ga('send', 'pageview');

			{{/ifeq}}

			{{#ifeq environment "staging"}}

			  ga('create', 'UA-64617433-6', 'auto');
			  ga('send', 'pageview');

			{{/ifeq}}

			{{#ifeq environment "development"}}

				if(!isPrivate) {
					// For socket debugging
					localStorage.debug = '*';
				}

			{{/ifeq}}

			// Load animations
			{{> script/player_animation section=section}}

			$(document).ready(function() {

				// Get reference to main content div
				gameContainer = $('#gameContent');

				if(isMobile) {

					{{#ifnoteq section 'homepage'}}
						var gameHeight = $(window).height();
						$('#wrapper').height(gameHeight);
						$('body, html').css('overflow', 'hidden');
						$(gameContainer).addClass('isMobile');
					{{/ifnoteq}}

				}
		
				{{#ifnoteq viewType 'landing'}}

						/**
						 * Listen for forms that dispatch socket events.
						 *
						 * ### Examples:
						 *
						 * @class global
						 */
						$(document).on('click', '.form .submit', function(evt) {
						    
					    var event = $(this).data().event;
					    var pkg = getFormData($(this));

					    // Emit event to socket
					    socket.emit(event, emitData(pkg));

					    // If autohide defined for this form, remove the element defined by 'data-hide' on the '#submitted' dom
					    if($(this).data().autohide) {
					        new TimelineLite()
					        .to('#' + $('#submitted').data('hide'), .5, {scale:0, autoAlpha:0, display:'none'})
					        .from($('#submitted'), .5, {scale:0, autoAlpha:0});
					    }

					    // Disable form button unless explicitly prevented, and show loading...
					    if(!$(this).data().keep_enabled) {
				        $(evt.currentTarget).attr('disabled', 'disabled');
				        loadToggle(true);
					    }

						});

				{{/ifnoteq}}

				// PLAYER LOGIC
				{{> script/player_logic section=section}}

			  $('#decider #btn_submit').click(function(evt) {
					var data = {};

			    data.deciderName = $('#player-name').val();

			    if(!data.deciderName) {
		        $('.submission .error').text('Please enter your name!').fadeIn();
		        return;
			    }

					data.deckId = $("#decks .glide__slide.active").data('id');
					data.accessCode = $('#share_code .access-code span').text();

				  $.post(
				  	"/api/create/",
						data)
						.done(function(data) {

							if(data.sessionCreated) {

								setupDecider();
								var gameCodeHtml = '';
								
								$('#login').remove();

						    // $('#decider .create').hide();
						    // $('#decider .waiting').show();

						    loginFromTo('new', 'lobby', .09);

						    _.each(data.accessCode.split(''), function(char, i) {
					          gameCodeHtml += '<span>' + char + '</span>';
					      });

						    // Ensure login is gone and all decide UI shows
						    $('#name,#join').remove();
						    // $('.access-code').html(gameCodeHtml);
						    $('#decider .create').hide();
					      $('#decider').show();
					      // $('#decider .waiting, #decider-debugging').show();
					      $('#lobby').addClass('wait');

						    $('#player-name').val(data.decider);

		            ga('send', 'event', 'Login', 'Username', data.decider);
		            
							}
						})
						.fail(function(xhr, status, error) {

							if(xhr.responseJSON.error)							
								$('#decider .error').text(xhr.responseJSON.error).fadeIn();

						});

				});

			// WAITING FOR PLAYERS (OLD SESSION)
			{{#ifeq section 'game-preloaded'}}	
						
				setupDecider();

			{{/ifeq}}

					{{> script/decider_logic section=section}}

	    {{#ifeq environment "development"}}

				function templateLoad() {

					var selected = $('#template_selector');

					if(selected.prop('selectedIndex') > 0)
				    socket.emit('game:load_screen', emitData({ index: selected.prop('selectedIndex') }));

				}
				$("#template_reload").click(function() {

					templateLoad();

				});
				$("#template_selector").change(function() {

					templateLoad();
					screensAnim.stop();
				
				});
				$("#countdowns_pause").click(function(evt) {

					var btn = $(evt.currentTarget);
					socket.emit('debug:pause', emitData());

					if(!$(btn).data('resume')) {
						$(btn).text('resume countdowns');
						$(btn).data('resume', 'true');
					}
					else {
						$(btn).text('pause countdowns');
						$(btn).data('resume', 'false');
					}

				});				
				$("#generate_players").click(function() {

					$("#generate_players").text('loading...');

					$('#gameContent').remove();
					$('#emulate-players').fadeIn();
					
					$('#emulate-players iframe').attr('src', 'http://localhost:3000/play/debug');
				});

		{{/ifeq}}

			});

		});

	}
</script>