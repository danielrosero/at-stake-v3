{{!< default}}
{{!-- 
/**
 * @Stake v3.0
 * Developed by Engagement Lab, 2016-2017
 * ==============
 * 
 * Script include for global logic
 * ==========
 */
--}}

<script type="text/javascript">

	var socket;
	var socketEvents;
  var gameCode;
  var deck;
  var gameEnded = false;
	var gameContainer;

  var playerId;
  var playerUID;
  var isDecider;
	var timeline = new TimelineLite();
	var mobileDetect = new MobileDetect(window.navigator.userAgent);

	var isApple = mobileDetect.is('iOS');
	var isAndroid = mobileDetect.is('Android') || mobileDetect.match('Android');
	var isMobile = (isAndroid || isApple);

	// Can be set by any event logic waiting for content update
	var updateContentCallback;

	// For countdown debugging
  var countdownPaused = false;

  // Tracks current phase index and the screen during each phase
  var currentPhaseIndex = -1;
  var currentScreenIndex = 0;

	{{!-- Group view cleanup --}}
	{{#ifeq viewType 'group'}}
	    $('.body').addClass('game-bg group');
	    $('#wrapper').addClass('group');
	    $('.navbar.main').attr ('style', 'display:none;');
	{{/ifeq}}

  var sfxPath = 'https://res.cloudinary.com/engagement-lab-home/video/upload/v1/at-stake/sfx/';
  {{#ifeq env "development"}}
  	sfxPath = '/sfx/'
  {{/ifeq}}

  // All possible socket event IDs
  // TODO: Change based on game type?
	var eventIds = [

		{{#ifnoteq environment "production"}}
		'debug:pause',
		{{/ifnoteq}}

		'connect',
		'disconnect',
		'game:last',

		'player:loggedin',
		'player:inactive',
		'player:reconnected',
		'players:update',
		'player:finished',
		'player:agenda_item',
		'player:assignrole',

		'game:error',
		'game:tutorial',
		'game:start',
		'game:next',
		'game:next_round',
		'game:next_item',
		'game:ending',
		'game:ended',
		'game:end',
		'game:resumed',
		'game:notfound',
		'game:countdown',
		'game:countdown_ending',
		'game:countdown_end',
		'game:countdown_player',
		'game:phase_over',
		'game:round_over',
		'game:player_done',
		'game:survey',
		'game:advance',
		'game:decider',

		'coins:add',
		'coins:remove',
	
	];

	/* 
	 Associate provided data object with current game ID
	*/
	var emitData = function(data) {

		if(gameCode === undefined && typeof(data.code) !== 'undefined')
			gameCode = data.code;

		return { gameId: gameCode, msgData: data };
	
	};

	/* 
	 Obtains the embedded data ('data-key="something"') object from the provided submit button
	*/
	var getFormData = function(submitElement) {

		var pkg;

		if(submitElement[0].dataset === undefined)
			return undefined;
		
		try {
			pkg = JSON.parse(submitElement[0].dataset.package);
		}
		catch(e) {
			pkg = submitElement[0].dataset.package;
		}

		if($.isPlainObject(pkg)) {
			$.each(Object.keys(pkg), function( key, value ) {

				if(pkg[value] !== undefined)
				  pkg[value] = $(pkg[value].toString()).val();

			});
		}
		else if(!submitElement.is('button'))
			pkg = $(pkg).val();

		return pkg;

	};

	/* 
		Util to convert seconds to h:mm:ss
	*/
	var secondsToHms = function(d) {

	  d = Number(d);
	  var h = Math.floor(d / 3600);
	  var m = Math.floor(d % 3600 / 60);
	  var s = Math.floor(d % 3600 % 60);

	  var hourDisplay = '<span id="h">' + (h > 0 ? h + ":" + (m < 10 ? "0" : "") : "") + '</span>';
	  var minsDisplay = '<span id="m">' + m + '</span>';
	  var secondsDisplay = '<span id="s">' + (s < 10 ? "0" : "") + s + '</span>';

	  return (hourDisplay + minsDisplay + ":" + secondsDisplay); 

	};

  /**
  * Util to inject markup into game content container and run any callbacks
  *
  * @param {String} content HTML to use
  * @param {Function} callback Function to call after HTML updated
  * @param {Boolean} pauseAnimate Don't animate screen back in; instead pass animate function to callback to use later
  * @class global
  * @name updateGameContent
  */
	var updateGameContent = function(content, callback, pauseAnimate) {

		var lobbyAnim = new TimelineLite();
		lobbyAnim.to(gameContainer, .5, {xPercent:-100, ease:Expo.easeInOut, onComplete:function() {

			// Inject markup content and fire callback when done
			gameContainer.html(content)
									 .promise()
									 .done(function() {

									 		runMods();
				
											if(!pauseAnimate) {
												// Animate screen back in now and then run callback
												lobbyAnim.fromTo(gameContainer, .5, {xPercent:100}, {x:0, xPercent:0, ease:Expo.easeInOut, onComplete:function() {
										 		
											 		if(callback)
												 		callback();

												 	if(updateContentCallback)
													 	updateContentCallback();

												}})
											}
											else {
													// Animate screen back in later using function passed to callback													
											 		if(callback)
												 		callback(function() {
												 			lobbyAnim.fromTo(gameContainer, .5, {xPercent:100}, {x:0, xPercent:0, ease:Expo.easeInOut});
												 		});
												 	
												 	if(updateContentCallback)
													 	updateContentCallback();

											}

									    // Hide loading
									    $('#loading-modal').fadeOut(250);

									 });

		}})

		if($('#top-header').length > 0) {
			var topBar = $('#top-header').detach();
			topBar.after('#nav-close-wrapper');
		}
	}

	var runMods = function() {

		var modifier = $('span#modifier');

		// Engage any template script modifiers
		if(modifier.length > 0) {

			if(modifier.data().hide_next) 
		 		$('#btn-next').fadeOut();
		 	else
		 		$('#btn-next').fadeIn();
			
			if(modifier.data().highlight) 
				$(modifier.data().highlight).addClass('highlight');

			if(modifier.data().timer) {
			}
	 	
		}
		else {

				// Defaults
		 		$('#btn-next').fadeIn();

		}

	}

	/*
	    Hide/show loading modal
	*/
	var loadToggle = function(show, fast) {
	 
	    if(fast) {
	        // Hide/show loading w/o anim
	        $('#loading-modal').toggle(show);
	    }
	    else {
	        // Hide/show loading
	        $('#loading-modal').fadeTo(250, (show ? 1 : 0), 'easeInOutQuart');
	    }

	}

	var registerEvents = function() {

    {{#ifeq environment "development"}}
        
        socket.on('connect_timeout', function() {
           console.warn('Client timed out when connecting.');
           {{!-- debugger; --}}
        });
        socket.on('disconnect', function() {
           console.warn('Client was disconnected!');
           {{!-- debugger; --}}
        });
        socket.on('reconnecting', function() {
           console.log('Reconnecting.');
           {{!-- debugger; --}}
        });
        socket.on('reconnect_attempt', function() {
           console.log('Trying to reconnect!');
           {{!-- debugger; --}}
        });
        socket.on('reconnect_error', function(err) {
           console.error('Reconnect error: %s', err);
           {{!-- debugger; --}}
        });

        console.log('Connecting to game "' + gameCode + '".');

    {{/ifeq}}

    $.each(eventIds, function(index, id) {
      
      socket.on(id, function(eventData) {

            {{#ifnoteq environment "production"}}

                $('#last-event').text('last event: ' + id);

                console.log("EVENT ID: ", id);

            {{/ifnoteq}}
            
            socketEvents(id, eventData);

            if(typeof(gameEvents) == "function")
                gameEvents(id, eventData);

        });

    });

	}

	var setupDecider = function() {

    isDecider = true;

    // Accesscode may be provided by server when debugging
    if(!gameCode) {
	    gameCode = '{{accessCode}}';

	    // Ensure login is gone and all decide UI shows
	    $('#name,#join').remove();
	    $('.access-code').text(gameCode);
	    $('#decider .create').hide();
      $('#decider').show();
      $('#decider .waiting, #decider-debugging').show();
      $('#lobby').addClass('wait');

	    $('#player-name').val('Player_' + Math.floor(Math.random() * (10 - 1 + 1)) + 1);

		}

    // Create uid for player
    playerUID = Math.floor(Math.pow(10, 10-1) + Math.random() * (Math.pow(10, 10) - Math.pow(10, 10-1) - 1));
    sessionStorage.setItem('uUID', playerUID);

    // Open socket connection
    socket = io('//{{host}}', {path: '/at-stake-socket', 'reconnection': true,'reconnectionDelay': 500,'maxReconnectionAttempts':Infinity});
    registerEvents();

	}

	{{#if mobile}}
		{{!-- LOAD MOBILE METHODS IF MOBILE DEVICE --}}
		{{> script/mobile}}
	{{/if}}

window.onload = function() {

	// Show body only after everything is loaded
  // document.body.style.display = "block";
  $('body').fadeIn(1000);

  // Detect if browser is in private/ingonito mode and if so, prevent any execution and show warning message
	detectPrivateMode(function(isPrivate) {

		// Landing page class for body
		{{#ifeq viewType 'landing'}}
				$('body').addClass('landing');
		{{/ifeq}}

		$("#nav-dropdown").on('click', function() {
			$('.nav-dropdown').show();
			$('#nav-close').show();

			openAnim.play(0);

		});
		$('#nav-close').on('click', function() {

			closeAnim.play();

		});

		{{#ifeq environment "production"}}
			
			// GA include
			(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
		  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
		  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
		  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

		  ga('create', 'UA-64617433-4', 'auto');
		  ga('send', 'pageview');

		{{else}}

			if(!isPrivate) {
				// For socket debugging
				localStorage.debug = '*';
			}

		{{/ifeq}}

		// Load animations
		{{> script/player_animation}}

		$(document).ready(function() {

			// Get reference to main content div
			gameContainer = $('#gameContent');

			if(isMobile) {

				{{#ifnoteq section 'homepage'}}
					let gameHeight = $(window).height();
					$('#wrapper').height(gameHeight);
					$('body, html').css('overflow', 'hidden');
				{{else}}				
					console.log("youre not playing the game silly");
				{{/ifnoteq}}

			}
	
			{{#ifnoteq viewType 'landing'}}

					/**
					 * Listen for forms that dispatch socket events.
					 *
					 * ### Examples:
					 *
					 * @class global
					 */
					$(document).on('click', '.form .submit', function(evt) {
					    
				    var event = $(this).data().event;
				    var pkg = getFormData($(this));

				    // Emit event to socket
				    socket.emit(event, emitData(pkg));

				    // If autohide defined for this form, remove the element defined by 'data-hide' on the '#submitted' dom
				    if($(this).data().autohide) {
				        new TimelineLite()
				        .to('#' + $('#submitted').data('hide'), .5, {scale:0, autoAlpha:0, display:'none'})
				        .from($('#submitted'), .5, {scale:0, autoAlpha:0});
				    }

				    // Disable form button unless explicitly prevented, and show loading...
				    if(!$(this).data().keep_enabled) {
			        $(evt.currentTarget).attr('disabled', 'disabled');
			        loadToggle(true);
				    }

					});

			{{/ifnoteq}}

			// PLAYER LOGIC
			{{> script/player_logic section=section}}

			

		  $('#decider #btn_submit').click(function(evt) {
				var data = {};

		    data.deciderName = $('#player-name').val();

		    if(!data.deciderName) {
	        $('.submission .error').text('Please enter your name!').fadeIn();
	        return;
		    }

				data.deckId = $("#decks .glide__slide.active").data('id');
				data.accessCode = gameCode;

			  $.post(
			  	"/api/create/",
					data)
					.done(function(data) {

						if(data.sessionCreated) {

							setupDecider();
							
							$('#login').remove();

					    $('#decider .create').hide();
					    $('#decider .waiting').show();
						
						}
					})
					.fail(function(xhr, status, error) {

						if(xhr.responseJSON.error)							
							$('#decider .error').text(xhr.responseJSON.error).fadeIn();

					});

			});

		// WAITING FOR PLAYERS (OLD SESSION)
		{{#ifeq section 'game-preloaded'}}	
					
			setupDecider();

		{{/ifeq}}

				{{> script/decider_logic section=section}}

    {{#ifeq environment "development"}}

			function templateLoad() {

				var selected = $('#template_selector');

				if(selected.prop('selectedIndex') > 0)
			    socket.emit('game:load_screen', emitData({ index: selected.prop('selectedIndex') }));

			}
			$("#template_reload").click(function() {

				templateLoad();

			});
			$("#template_selector").change(function() {

				templateLoad();
				screensAnim.stop();
			
			});
			$("#countdowns_pause").click(function(evt) {

				var btn = $(evt.currentTarget);
				socket.emit('debug:pause', emitData());

				if(!$(btn).data('resume')) {
					$(btn).text('resume countdowns');
					$(btn).data('resume', 'true');
				}
				else {
					$(btn).text('pause countdowns');
					$(btn).data('resume', 'false');
				}

			});				
			$("#generate_players").click(function() {

				$("#generate_players").text('loading...');

				$('#gameContent').remove();
				$('#emulate-players').fadeIn();
				
				$('#emulate-players iframe').attr('src', 'http://localhost:3000/play/debug');
			});

	{{/ifeq}}

		});

	});

}
</script>